#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass abntex2
\begin_preamble

\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language brazilian
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Ontologias da web semântica e 
\lang english
DSLs
\lang brazilian
 têm um papel fundamental na criação de um meio de descrição de conhecimento
 por parte dos especialistas e portanto suportar o design de SADs baseados
 em conhecimento.
 
\end_layout

\begin_layout Standard
Ontologias servem para representar o conhecimento de especialistas do domínio
 e DSLs servem para customizar o comportamento dos SADs.
 As ontologias apareceram originalmente no contexto da filosofia, onde se
 referem ao estudo da natureza, existência e realidade dos entes.
 Elas são usadas em vários campos do conhecimento.
 Neste projeto, ontologias referem-se a representações de conhecimento,
 que precisam ser implementadas em código.
 As implementações de software podem trabalhar com ontologias da Web Semântica
 que fornecem a criação, armazenamento, busca e modificação de ontologias,
 seguindo padrões de formatos abertos.
 
\end_layout

\begin_layout Standard
Neste capítulo, vamos apresentar e discutir as ontologias da web semântica
 e as DSLs.
 Descrevendo a teoria da Web Semântica: fundamentos, Ontologias, o 
\lang english
Resource Description Framework (RDF
\lang brazilian

\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "RDF"
description "Resource Description Framework"

\end_inset

) e a 
\lang english
Web Ontology Language
\lang brazilian
 (
\lang english
OWL
\lang brazilian

\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "OWL"
description "Web Ontology Language"

\end_inset

).
 Finalmente serão abordadas as 
\lang english
Domain Specific Languages (DSLs
\lang brazilian
) que são linguagens que permitem definir um meio de comunicação entre os
 especialistas e o sistema desenvolvido.
\end_layout

\begin_layout Section
Web Semântica.
\end_layout

\begin_layout Standard
A web foi criada para possibilitar o acesso, intercâmbio e recuperação de
 informações de maneira rápida e simples, seu crescimento exponencial e
 caótico fez com que a mesma se tornasse hoje um gigantesco repositório
 de documentos, o que dificulta a recuperação de informações.
 Até o momento, não existe nenhuma estratégia abrangente e satisfatória
 para a organização de documentos por meio de “motores de busca” que seja
 coerente com uma estrutura linguística.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Souza:2004"

\end_inset

.
\end_layout

\begin_layout Standard
Um exemplo da deficiência da web atual, pode ser identificada na busca realizada
 pelos sistemas de recuperação de informação, que usam palavras-chave nas
 buscas, onde apenas a similaridade e o número de ocorrências de certas
 palavras no conteúdo de documentos são levados em consideração e não a
 semântica presente naquela informação.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Souza:2004"

\end_inset

.
\end_layout

\begin_layout Standard
A Web Semântica aparece como uma proposta para organizar o conhecimento
 da internet semanticamente em formatos entendíveis pelos humanos e máquinas
 
\begin_inset CommandInset citation
LatexCommand citep
key "bernerslee2001"

\end_inset

.
 Procurando métodos para que as máquinas consigam realizar a interpretação
 do significado, que é uma habilidade inata dos seres humanos, através da
 associação dos conceitos que estão no cérebro por meio de estruturas neurais
 e que não é suportado pelas máquinas tradicionais.
\end_layout

\begin_layout Standard
A Web Semântica tem como finalidade estruturar os dados e informações disponívei
s na Web, para que tenham significado e sejam computáveis por máquinas.
 Gerando um ambiente onde agentes de software e usuários possam trabalhar
 de maneira cooperativa.
 A Web Semântica é definida por um conjunto de padrões propostos pelo 
\lang english
World Wide Web Consortium
\lang brazilian
 (W3C 
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "W3C"
description "World Wide Web Consortium"

\end_inset

).
 A figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Semantic_Web_History"

\end_inset

 apresenta alguns dos padrões que constituem a Web Semântica de maneira
 cronológica.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/Semantic Web History.png
	lyxscale 20
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
História da Web Semântica 
\begin_inset CommandInset label
LatexCommand label
name "fig:Semantic_Web_History"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fadaptada{bikakis2013xml}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand citet
key "bernerslee2001"

\end_inset

 propuseram a Web Semântica, em 2001, como uma extensão da Web atual, na
 qual é possível vincular conceitos de maneira estruturada e padronizada.
 Permitindo a criação de conhecimento estruturado, computável por máquinas,
 que pode ser compartilhado entre humanos e máquinas.
 A finalidade é criar uma web universal dos conhecimentos da humanidade.
 
\end_layout

\begin_layout Standard
A partir dessa visão conceitual sobre a Web, 
\begin_inset CommandInset citation
LatexCommand citet
key "bernerslee2001"

\end_inset

 propuseram uma arquitetura que organiza as representações do conhecimento
 por meio de camadas, conhecida como 
\lang english
Semantic Web Cake,
\lang brazilian
 que é ilustrada na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Web-Semantic-Architecture"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/Semantic Web Architecture.png
	width 60col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Arquitetura em camadas da Web Semântica
\begin_inset CommandInset label
LatexCommand label
name "fig:Web-Semantic-Architecture"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fadaptada{fensel2011semantic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A base dessa arquitetura é estabelecida pelos padrões 
\lang english
Unicode
\lang brazilian
 e 
\lang english
Uniform Resource Identifier
\lang brazilian
 (URI
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "URI"
description "Uniform Resource Identifier"

\end_inset

), que padronizam a representação dos dados por meio das seguintes camadas:
 
\end_layout

\begin_layout Description

\lang english
Unicode
\lang brazilian
 é um padrão que codifica os caracteres na maioria dos sistemas de escrita
 para representação de texto com fines de processamento computacional.
\end_layout

\begin_layout Description

\lang english
URI
\lang brazilian
 permite identificar os recursos disponíveis na Web por meio de uma 
\lang english
String
\lang brazilian
 única.
\end_layout

\begin_layout Description

\lang english
XML
\lang brazilian

\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "XML"
description "Extensible Markup Language"

\end_inset

 representa os dados de maneira sintática, através da definição de 
\lang english
markups
\lang brazilian
 que codificam documentos em formatos preestabelecidos.
 Ela permite que informações sejam legíveis tanto por humanos como por computado
res, suportando as camadas superiores na arquitetura.
\end_layout

\begin_layout Description

\lang english
RDF
\lang brazilian
 é um modelo padrão para intercambiar dados na web.
 
\lang english
RDF
\lang brazilian
 tem características que permitem a integração de dados inclusive de esquemas
 diferentes, e suporta especialmente a evolução dos esquemas a través do
 tempo sem requerer que mudanças nos consumidores de dados.
 RDF é uma recomendação do W3C
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.w3.org/RDF/
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Description

\lang english
Ontology
\lang brazilian
 estende a camada de descrição, fornecendo mais expressividade na definição
 de conceitos, de classificações, de relações e de inferência.
\end_layout

\begin_layout Description

\lang english
Logic
\lang brazilian
 permite definir regras lógicas para deduzir e inferir novas informações
 que conseguem mudar a estrutura da ontologia de maneira dinâmica.
\end_layout

\begin_layout Description

\lang english
Proof
\lang brazilian
 fornece mecanismos para avaliar o nível de confiabilidade das fontes de
 recursos e informações.
\end_layout

\begin_layout Description

\lang english
Trust
\lang brazilian
 representa o conhecimento validado e confiável.
\end_layout

\begin_layout Description

\lang english
Digital-Signature
\lang brazilian
 permite integrar métodos de segurança que garantam a segurança da informação.
\end_layout

\begin_layout Standard
Uma das contribuições importantes da Web Semântica foi a formalização da
 representação de ontologias (próxima sessão).
 No desenvolvimento desta pesquisa, foram usadas desde as camadas inferiores
 até o 
\lang english
OWL
\lang brazilian
, permitindo definir ontologias que representam os domínios de conhecimento.
\end_layout

\begin_layout Subsection*
Ontologias
\end_layout

\begin_layout Standard
Existem várias interpretações do conceito ontologia, dependendo da finalidade
 para qual elas sejam usadas.
 
\begin_inset CommandInset citation
LatexCommand citet
key "Smith2007"

\end_inset

 descrevem a ontologia como uma área da filosofia, que estuda a natureza,
 existência e realidade dos entes, assim como as categorias do ser e das
 relações semânticas.
\end_layout

\begin_layout Standard
Na ciências da computação e informação, a palavra 
\begin_inset Quotes eld
\end_inset

ontologia
\begin_inset Quotes erd
\end_inset

 é definida como uma especificação formal e explicita de uma conceitualização
 compartilhada de um domínio de conhecimento.
 
\begin_inset CommandInset citation
LatexCommand citet
key "allemang2011semantic"

\end_inset

 definem as ontologias, no contexto da Web Semântica, como um esquema de
 representação que permite conceitualizar e estruturar conhecimento, permitindo
 a sua interpretação por computadores, com o objetivo de compartilhar conhecimen
to entre humanos e computadores.
\end_layout

\begin_layout Standard
Uma ontologia é um sistema de organização e representação do conhecimento,
 do inglês 
\lang english
Knowledge Organization System (KOS)
\lang brazilian
, que é uma estrutura conceitual e computacional que permite representar
 o conhecimento, de qualquer domínio, por meio de entidades, classificações,
 relações semânticas, regras e axiomas.
 Uma ontologia é especificada por meio de componentes básicos que são as
 classes, relações, axiomas e instâncias.
 
\end_layout

\begin_layout Description

\series bold
Classes
\series default
 são o foco da maioria das ontologias.
 Elas são utilizadas para descrever os conceitos de um domínio, possibilitando
 a organização e classificação dos indivíduos em um sistema lógico e hierárquico
, contendo subclasses que representam conceitos específicos 
\begin_inset CommandInset citation
LatexCommand citep
key "noy2001ontology"

\end_inset

.
 
\end_layout

\begin_layout Description

\series bold
Relações
\series default
 representam o tipo de interação entre os conceitos de um domínio e as proprieda
des presentes nas classes e indivíduos.
 Elas podem ter características próprias, como serem transitivas, simétricas,
 ou terem uma cardinalidade definida.
 
\end_layout

\begin_layout Description

\series bold
Axiomas
\series default
 são utilizados para modelar regras assumidas como verdadeiras no domínio
 em questão, de modo que seja possível associar relacionamentos entre os
 indivíduos, além de fornecer características descritivas e lógicas para
 os conceitos.
 
\end_layout

\begin_layout Description

\series bold
Indivíduos
\series default
, ou instâncias das classes, são utilizados para representar elementos específic
os, ou seja, os próprios dados, que juntamente com a definição de uma ontologia,
 constituem a base de conhecimento 
\begin_inset CommandInset citation
LatexCommand citep
key "noy2001ontology"

\end_inset

.
 Indivíduos representam objetos do domínio de interesse 
\begin_inset CommandInset citation
LatexCommand citep
key "horridge2011owl"

\end_inset

.
\end_layout

\begin_layout Standard
Segundo 
\begin_inset CommandInset citation
LatexCommand citet
key "Patel-schneider05buildingthe"

\end_inset

, a representação de uma ontologia é feita por meio de lógica de predicados
 e lógica descritiva, usando padrões adotados pela comunidade, como 
\lang english
RDF
\lang brazilian
 e 
\lang english
OWL
\lang brazilian
.
 A Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Smart-data-continuum"

\end_inset

 mostra os níveis de representação de dados na forma de conhecimento processável
 por máquinas.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/smart data.png
	lyxscale 50
	width 60col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\lang english
Smart data continuum
\lang brazilian
: níveis de representação de dados na forma de conhecimento processável
 por máquinas.
\begin_inset CommandInset label
LatexCommand label
name "fig:Smart-data-continuum"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fadaptada{allemang2011semantic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
O nível mais baixo de representação começa com os dados sem nenhum significado
 semântico, dependentes do contexto da aplicação.
 O segundo nível envolve a definição de esquemas 
\lang english
XML
\lang brazilian
 para conseguir independência dos dados da aplicação, os dados fluem entre
 aplicações em um único domínio mas não podem ser compartilhados fora do
 domínio.
 No terceiro nível, os dados podem ser combinados a partir de diferentes
 domínios, sendo suficientemente independentes para serem recuperados e
 combinados com outras fontes de dados.
 Finalmente no quarto nível, é possível inferir novos dados a partir dos
 existentes e compartilhá-los entre aplicações sem requerer interferência
 humana 
\begin_inset CommandInset citation
LatexCommand citep
key "sugumaran2011"

\end_inset

.
\end_layout

\begin_layout Subsection*

\lang english
Resource Description Framework
\lang brazilian
 (
\lang english
RDF
\lang brazilian
)
\end_layout

\begin_layout Standard
O 
\lang english
Resource Description Framework (RDF)
\lang brazilian
 é uma família de especificações da W3C, que foi disponibilizada em 1999
 como parte do W3C's 
\lang english
Semantic Web Effort
\lang brazilian
.
 Elas fornecem um 
\lang english
framework
\lang brazilian
 comum que permite que dados sejam compartilhados e reusados através das
 fronteiras das aplicações, empresas e comunidades 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.w3.org/2001/sw/
\end_layout

\end_inset


\end_layout

\end_inset

.
 O 
\lang english
RDF
\lang brazilian
 foi originalmente projetado como um modelo de metadados e também chegou
 a ser usado como um método de descrições conceituais, principalmente para
 descrever recursos web e formalmente é um formato de dados de tipo grafo
 direcionado e rotulado para representar informação na web
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.w3.org/TR/rdf-sparql-query/
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
O 
\lang english
RDF
\lang brazilian
 é usado em várias áreas de aplicação, como 
\emph on
\lang english
resource discovery
\emph default
\lang brazilian
, para melhorar as capacidades dos motores de busca, 
\emph on
\lang english
cataloging
\emph default
\lang brazilian
, para descrever conteúdo e as relações de conteúdo disponibilizados em
 um sistema web particular, e descrição de 
\emph on
\lang english
intellectual property rights
\emph default
\lang brazilian
 de páginas web.
 Seu modelo básico de dados consiste em um padrão de três tipos de objetos,
 conhecido como triplas
\begin_inset CommandInset label
LatexCommand label
name "triplas"

\end_inset

:
\end_layout

\begin_layout Itemize

\series bold
Sujeito
\series default
: representa os recursos e são identificados por meio de 
\lang english
URIs
\lang brazilian
.
 Por exemplo, uma página web ou um elemento 
\lang english
HyperText Markup Language (HTML 
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "HTML"
description "HyperText Markup Language"

\end_inset

)
\lang brazilian
 podem ser recursos.
\end_layout

\begin_layout Itemize

\series bold
Predicado
\series default
: são aspectos, características, atributos ou relações especificas que descrevem
 o sujeito, cada predicado têm um significado especifico e relaciona um
 sujeito com um objeto.
\end_layout

\begin_layout Itemize

\series bold
Objeto
\series default
: um recurso especifico ou valor de propriedade que representa uma característic
as do sujeito 
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.w3.org/TR/PR-rdf-syntax/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Com 
\lang english
RDF
\lang brazilian
 é possível explicitar relações entre dois objetos (usando-se uma Tripla
 
\lang english
RDF
\lang brazilian
), mas não é possível fazer modelagens especificas nem inferência.
 Para descrever detalhadamente o que um objeto representa e suas relações
 com outros objetos, são necessárias ontologias descritas no padrão 
\lang english
OWL
\lang brazilian
.
 
\end_layout

\begin_layout Subsection*

\lang english
SPARQL Protocol and RDF Query Language (SPARQL
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "SPARQL"
description "SPARQL Protocol and RDF Query Language"

\end_inset

)
\end_layout

\begin_layout Standard

\lang english
SPARQL
\lang brazilian
 é uma linguagem de consulta semântica usada por bancos de armazenamento
 e recuperação de dados de dados compatíveis com o formato 
\lang english
RDF
\lang brazilian
 ou que sejam fornecidos como 
\lang english
RDF
\lang brazilian
 via 
\lang english
middleware
\lang brazilian
.
 Atualmente é um padrão especificado pela 
\lang english
W3C
\lang brazilian
 e uma das tecnologias principais da web semântica.
\end_layout

\begin_layout Standard
A versão de SPARQL 1.1, veio com novas características que permitem a atualização
 de dados em formato 
\lang english
RDF
\lang brazilian
, permitindo atualizar, criar e remover dados em formato 
\lang english
RDF
\lang brazilian
 em um 
\lang english
Graph Store
\lang brazilian

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.w3.org/TR/sparql11-update/
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*

\lang english
Web Ontology Language
\lang brazilian
 (
\lang english
OWL
\lang brazilian
)
\end_layout

\begin_layout Standard
A 
\lang english
Web Ontology Language
\lang brazilian
 (
\lang english
OWL
\lang brazilian
) foi recomendada pelo W3C em 2004 para representar e compartilhar ontologias
 na Web.
 Essa linguagem foi projetada para aplicações que necessitam processar o
 conteúdo da informação, em vez de apenas organizar informações em nós 
\begin_inset CommandInset citation
LatexCommand citep
key "mcguinness2004owl"

\end_inset

.
 
\lang english
OWL
\lang brazilian
 é uma linguagem que permite que a semântica seja explicitamente associada
 ao conteúdo dos dados na web e formalmente especificada através de ontologias,
 compartilhadas na Internet.
 
\end_layout

\begin_layout Standard
A versão 
\lang english
OWL
\lang brazilian
 2 é a versão mais recente da linguagem.
 De acordo com as especificações do W3C
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.w3.org/TR/owl2-overview/
\end_layout

\end_inset

, a 
\lang english
OWL 2
\lang brazilian
 adicionou três novos perfis (
\lang english
sub-linguagens
\lang brazilian
) aos perfis DL e 
\lang english
Full
\lang brazilian
 já existentes: 
\lang english
OWL 2
\lang brazilian
 EL,
\lang english
 OWL 2 QL
\lang brazilian
 e 
\lang english
OWL RL
\lang brazilian
 (Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:OWL2-Profiles"

\end_inset

).
 Cada um desses perfis fornece características de expressividade diferente
 para diversos cenários de aplicação:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/owl2Profiles.png
	width 60col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
OWL2 Profiles.
\begin_inset CommandInset label
LatexCommand label
name "fig:OWL2-Profiles"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Figura original do W3C 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.w3.org/People/Sandro/owl2-profiles-doc
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Description

\lang english
Full
\lang brazilian
 O perfil 
\lang english
OWL Full
\lang brazilian
 é direcionado para usuários que querem a máxima expressividade e a liberdade
 sintática do 
\lang english
OWL
\lang brazilian
 sem garantia computacional.
 É improvável que qualquer motor de raciocínio seja capaz de suportar completame
nte cada recurso da 
\lang english
OWL Full
\lang brazilian
 
\begin_inset CommandInset citation
LatexCommand citep
key "mcguinness2004owl"

\end_inset

.
\end_layout

\begin_layout Description
DL O perfil 
\lang english
OWL DL
\lang brazilian
 (
\lang english
Description Logic
\lang brazilian
) é para aplicações que necessitam de máxima expressividade, enquanto mantém
 a computabilidade (todas as conclusões são garantidas de ser computáveis)
 e decidibilidade (todas as computações terminarão em tempo finito) 
\begin_inset CommandInset citation
LatexCommand citep
key "mcguinness2004owl"

\end_inset

.
 
\lang english
OWL DL
\lang brazilian
 inclui as construções da linguagem 
\lang english
OWL
\lang brazilian
, mas elas podem ser usadas somente sob certas restrições.
 
\end_layout

\begin_layout Description
EL O perfil 
\lang english
OWL
\lang brazilian
 2 EL é baseado na família EL++ de lógica descritiva (
\lang english
Description
\lang brazilian
 
\lang english
Logic
\lang brazilian
).
 Esse perfil é particularmente útil em aplicações utilizando ontologias
 que contêm um grande número de propriedades e/ou classes.
 Além disso, o 
\lang english
OWL
\lang brazilian
 2 EL utiliza um padrão comum, utilizado em ontologias, para conceitos e
 planejamento, ou seja, a combinação de conjunção e qualidades existenciais.
\end_layout

\begin_layout Description

\lang english
QL
\lang brazilian
 O perfil 
\lang english
OWL 2 QL
\lang brazilian
 é baseado na família 
\lang english
DL-Lite
\lang brazilian
 de lógica descritiva.
 Esse perfil foi criado para permitir o raciocínio (
\lang english
reasoning
\lang brazilian
) eficiente com grandes quantidades de dados estruturados de acordo com
 esquemas relativamente simples.
 Ele fornece a maioria dos recursos necessários para capturar modelos conceituai
s, tais como diagramas de classe UML, diagramas de entidade/relacionamento,
 e esquemas de banco de dados.
 
\end_layout

\begin_layout Description
RL O perfil 
\lang english
OWL 2 RL
\lang brazilian
 é voltado para aplicações que exigem raciocínio escalável em troca de alguma
 restrição de poder expressivo.
 Ele define um subconjunto sintático de 
\lang english
OWL 2
\lang brazilian
 que favorece a implementação utilizando tecnologias baseadas em regras.
 Esse perfil pode ser utilizado na maioria das construções 
\lang english
OWL 2
\lang brazilian
.
 Porém, para permitir implementações baseadas em regras de raciocínio, a
 forma como essas construções podem ser usadas em axiomas foi restringida.
 
\end_layout

\begin_layout Subsection*
Protégé
\end_layout

\begin_layout Standard
O editor de ontologias Protégé 
\begin_inset CommandInset citation
LatexCommand citep
key "musen2015protege"

\end_inset

, é a ferramenta recomendada pela comunidade para criar ontologias em formato
 
\lang english
OWL
\lang brazilian
, fornecendo:
\end_layout

\begin_layout Itemize

\lang english
GUI Framework:
\lang brazilian
 para suportar múltiplas vistas da ontologia e layouts configuráveis de
 componentes.
\end_layout

\begin_layout Itemize

\lang english
API:
\lang brazilian
 para suportar o desenvolvimento de sistemas baseados em conhecimento.
\end_layout

\begin_layout Itemize

\lang english
Modularization
\lang brazilian
: permite suportar a edição de múltiplas ontologias em um mesmo entorno.
\end_layout

\begin_layout Itemize

\lang english
Navigation
\lang brazilian
: fornece buscas globais e locais e hipervínculos nos editores.
\end_layout

\begin_layout Itemize

\lang english
Refactoring tools
\lang brazilian
: verificação de coerência das ontologias.
\end_layout

\begin_layout Itemize

\lang english
Reasoning:
\lang brazilian
 compatibilidade com vários 
\lang english
reasoner
\lang brazilian
 para suportar a inferência.
\end_layout

\begin_layout Itemize

\lang english
Plug-ins
\lang brazilian
: arquitetura extensível que suporta diferentes tipos de 
\lang english
plug-ins.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
(corrigido) terminou meio seco.
 Você poderia ter falado da ou de como usou o Protege ou de como ontologias
 foram integradas na ferramenta.
 ou do fato que Domain Experts nao poderiam usar OWL diretamente.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*

\lang english
Triplestores 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Triplestore"

\end_inset


\end_layout

\begin_layout Standard
Uma 
\lang english
triplestore
\lang brazilian
 é um tipo de banco de dados, baseado em grafos, para armazenar e recuperar
 fatos (assertions).
 Esses fatos são representados na forma de triplas no padrão 
\lang english
RDF
\lang brazilian
 (Seção 
\begin_inset CommandInset ref
LatexCommand ref
reference "triplas"

\end_inset

).
 Dados são armazenados em forma de redes de objetos com vínculos rotulados
 entre eles 
\begin_inset CommandInset citation
LatexCommand citep
key "rusher2003triple"

\end_inset

.
 Esse tipo bancos de dados é recomendável quando os dados tem uma estrutura
 flexível, cujas relações não tem um padrão definido.
\end_layout

\begin_layout Standard
A 
\lang english
triplestore
\lang brazilian
 
\lang english
Blazegraph
\lang brazilian
 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.blazegraph.com/
\end_layout

\end_inset


\end_layout

\end_inset

 é um dos mais completos bancos de dados baseados em grafos e com suporte
 SPARQL.
 Ela integra as características de uma 
\lang english
triplestore
\lang brazilian
, fornece suporte nativo à 
\lang english
SPARQL
\lang brazilian
 e implementa o 
\lang english
SPARQL Protocol Endpoint
\lang brazilian
.
 Esse último, padroniza a comunicação com os clientes e a compatibilidade
 com os sistemas web, por meio de 
\lang english
um Endpoint
\lang brazilian
 (um endereço onde requisições em SPARQL podem ser feitas).
 
\end_layout

\begin_layout Standard
O Blazegraph foi escolhido por ter código aberto (Licença GPL) e ser compatível
 com os padrões da Web Semântica.
 Mas qualquer 
\lang english
triplestore
\lang brazilian
 que seja compatível com os mesmos padrões (SPARQL 1.1 e RDF) pode ser usada.
 As principais características dela são:
\end_layout

\begin_layout Itemize
Banco de dado baseado em grafo de alta performance
\end_layout

\begin_layout Itemize
Suporte Blueprints API e RDF/SPARQL
\end_layout

\begin_layout Itemize
Clusters de replicação altamente disponíveis (HAJournalServer) 
\end_layout

\begin_layout Itemize
Armazenamento de dados de uma única máquina até ~50B triples/quads (RWStore)
 
\end_layout

\begin_layout Itemize
O armazenamento de dados em cluster é essencialmente ilimitado (BigdataFederatio
n) 
\end_layout

\begin_layout Itemize
REST API Com deployment embutida e / ou webapp (NanoSparqlServer) 
\end_layout

\begin_layout Itemize
SPARQL 1.1 nativo 
\end_layout

\begin_layout Itemize
RDFS+ Inferência e manutenção da verdade
\end_layout

\begin_layout Itemize
Triples, quads, ou Reificação feita corretamente (RDR) support 
\end_layout

\begin_layout Itemize
Gerenciador de memória Java aproveita o JVM nativo heap (no GC) 
\end_layout

\begin_layout Itemize
API centrada em vértices(RDF_GAS_API) 
\end_layout

\begin_layout Itemize
Licença dupla: GPLv2 ou commercial 
\end_layout

\begin_layout Itemize
Assinaturas de suporte ao desenvolvedor e produção
\end_layout

\begin_layout Standard
Para desenvolver os sistemas de software, presentes neste trabalho, foram
 usadas tecnologias da web semântica.
 Primeiramente foram desenhadas as ontologias em formato 
\lang english
OWL,
\lang brazilian
 na ferramenta Protégé, depois elas foram exportadas em RDF e, finalmente,
 integradas no framework Decisioner, que foi implementado usando a triplestore
 
\lang english
Blazegraph
\lang brazilian
 .
\end_layout

\begin_layout Standard

\lang english
O Blazegraph
\lang brazilian
 permitiu instanciar as ontologias, em formato 
\lang english
RDF,
\lang brazilian
 suportar inferência e permitir consultas através da linguagem 
\lang english
SPARQL.

\lang brazilian
 Essas funcionalidades foram complementadas com ferramentas para edição
 da ontologia via web (essa implementação está descrita no Capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Decisioner"

\end_inset

).
 
\end_layout

\begin_layout Standard
Além das ontologias, foi necessário fornecer um meio de definição de conheciment
o mais próximo à linguagem dos especialistas do domínio, para suportar a
 definição de SADs por parte deles.
 A solução identificada foi criar uma 
\lang english
DSL
\lang brazilian
 definida a seguir.
\end_layout

\begin_layout Section

\lang english
Domain Specific Language (DSL)
\lang brazilian
 
\end_layout

\begin_layout Standard
Em desenvolvimento de software e engenharia de domínio, uma linguagem de
 domínio específico, em inglês 
\emph on
\lang english
Domain-Specific Language
\lang brazilian
 (DSL)
\emph default
, é um tipo de linguagem de programação, ou linguagem de especificação,
 dedicada a um domínio particular de problema que usa expressões próprias
 dos especialistas daquele domínio.
 Um usuário, relacionado com um domínio específico, pode usar uma DSL sem
 ter experiência em desenvolvimento de software, pois a DSL está relacionada
 com seu domínio de trabalho.
 
\begin_inset CommandInset citation
LatexCommand citet
key "fowler2010domain"

\end_inset

 afirma que programadores instruem o computador no que ele deve fazer, pois
 já entendem a maneira dele trabalhar, mas, com 
\lang english
DSLs,
\lang brazilian
 é feito o inverso: o computador começa a entender o que o usuário do domínio
 escreve.
\end_layout

\begin_layout Standard
Segundo 
\begin_inset CommandInset citation
LatexCommand citet
key "Mernik:2005:DDL:1118890.1118892"

\end_inset

, as vantagens das DSL, em comparação com as linguagens de propósito geral,
 são a expressividade, facilidade de uso e a integração com o domínio da
 aplicação.
 O conceito não é novo, linguagens de programação de propósito especifico
 existem desde o começo das linguagens de programação, mas o termo tornou-se
 padrão devido à ascensão da modelagem de domínio específico.
 DSLs são classificadas da seguinte forma:
\end_layout

\begin_layout Itemize

\lang english
Domain-Specific Markup Languages
\lang brazilian
: são linguagens de um domínio particular com a particularidade de anotar
 os dados com etiquetas para que eles sejam sintaticamente distinguíveis.
 Um exemplo delas é a 
\lang english
Hypertext Markup Language (HTML),
\lang brazilian
 que permite anotar dados no domínio das páginas web.
\end_layout

\begin_layout Itemize

\lang english
Domain-Specific Modeling Languages (specification languages):
\lang brazilian
 são linguagens que permitem especificar sistemas com o propósito de modelá-los.
 São compostas de uma estrutura consistente e de um conjunto de regras que
 permitem interpretar o significado dos componentes modelados.
 Uma linguagem desse tipo é a 
\lang english
Unified Modeling Language
\lang brazilian
 (
\lang english
UML
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "UML"
description "Unified Modeling Language "

\end_inset


\lang brazilian
), que permite especificar sistemas de software.
\end_layout

\begin_layout Itemize

\lang english
Domain-Specific Programming Languages:
\lang brazilian
 são linguagens que permitem a programação em alto nível aplicada a um domínio
 especifico de conhecimento.
 Uma linguagem desse tipo é a linguagem R que permite a programação de conceitos
 estatísticos e geração de gráficos.
\end_layout

\begin_layout Standard
Segundo o tipo de implementação, as DSLs podem ser dividas em 
\lang english
external DSL e internal DSL
\lang brazilian

\begin_inset CommandInset citation
LatexCommand citep
key "fowler2010domain"

\end_inset

:
\end_layout

\begin_layout Description

\lang english
External
\begin_inset space \space{}
\end_inset

DSL:
\lang brazilian
 é uma linguagem de domínio especifico que é definida com uma sintaxe independen
te de outras linguagens de programação, tendo como principal vantagem a
 flexibilidade.
 A desvantagem é que requer um desenvolvimento de um 
\lang english
full
\lang brazilian
 parser para processá-la.
\end_layout

\begin_layout Description

\lang english
Internal
\begin_inset space \space{}
\end_inset

DSL:
\lang brazilian
 é uma linguagem de domínio especifico escrita dentro de uma linguagem 
\lang english
host
\lang brazilian
 existente.
 A vantagem desse enfoque de definição de DSL é que o tempo e custo de desenvolv
imento é menor, em relação a uma DSL externa.
 Linguagens desse tipo são escritas sobre uma linguagem de propósito geral
 e, por isso, apresentam a desvantagem de depender das instruções e característi
cas da linguagem 
\lang english
host,
\lang brazilian
 o que, em alguns casos, afeta a flexibilidade e expressividade da DSL que
 se quer definir.
\end_layout

\begin_layout Subsection*
Linguagem 
\lang english
Groovy
\end_layout

\begin_layout Standard

\lang english
Groovy
\lang brazilian
 é uma linguagem dinâmica para a máquina virtual Java (
\lang english
JVM
\lang brazilian
) 
\begin_inset CommandInset citation
LatexCommand citep
key "koenig2007groovy"

\end_inset

.
 Ela tem uma sintaxe parecida com Java, suporte para programação funcional,
 produz 
\lang english
JVM bytecodes
\lang brazilian
 e interopera bem com código e bibliotecas Java.
 Traz características de linguagens como 
\lang english
Python
\lang brazilian
, 
\lang english
Ruby
\lang brazilian
 e 
\lang english
Smalltalk
\lang brazilian
 para uma linguagem similar a Java 
\begin_inset CommandInset citation
LatexCommand citep
key "koenig2007groovy"

\end_inset

.
\end_layout

\begin_layout Standard
O grande benefício que 
\lang english
Groovy
\lang brazilian
 traz para este projeto é o suporte que a sua natureza dinâmica dá ao desenvolvi
mento de DSLs.
 Essas DSLs podem rodar diretamente na 
\lang english
JVM
\lang brazilian
 e usar bibliotecas Java já existentes.
 DSLs em 
\lang english
Groovy
\lang brazilian
 se integram facilmente à própria linguagem Groovy, de modo que não é aparente
 onde o código em 
\lang english
Groovy
\lang brazilian
 termina e a DSL começa 
\begin_inset CommandInset citation
LatexCommand citep
key "dearle2015groovy"

\end_inset

.
 Isso permite que a DSL seja implementada como uma DSL interna, estendendo
 a linguagem Groovy (e simplificando a sua criação), mas mantenha uma sintaxe
 próxima à linguagem usada pelos especialistas de domínio.
 Como uma DSL interna, ela pode usar ferramentas já existentes para auxiliar
 a escrita de código em Groovy, como editores com 
\shape italic
\lang english
syntax highlighting
\shape default
\lang brazilian
 e 
\shape italic
\lang english
code completion
\shape default
\lang brazilian
, para a sua edição.
\end_layout

\begin_layout Standard
Outra vantagem de Groovy é que ela é uma linguagem para a 
\lang english
JVM
\lang brazilian
 e existem muitas bibliotecas, em Java, que dão suporte às tecnologias da
 Web Semântica.
 Isso inclui bibliotecas como a 
\lang english
OWL API
\lang brazilian
, para trabalhar com ontologias em 
\lang english
OWL
\lang brazilian
, Apache 
\lang english
Jena
\lang brazilian
, para acesso a 
\lang english
triplestores
\lang brazilian
, entre outras.
 Finalmente, os SADs a serem criados serão aplicativos web, Groovy tem um
 web framework completo e amadurecido, o Grails
\lang english
 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\lang english
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://grails.org/
\end_layout

\end_inset


\end_layout

\end_inset


\lang brazilian
.
 
\end_layout

\begin_layout Standard
Grails usa uma abordagem de convenção sobre configuração que usa opções
 default razoáveis.
 Ele se integra bem com a JVM e tem características como ORM integrado,
 DSLs, metaprogramação durante runtime e compile-time, e programação assíncrona
 
\begin_inset CommandInset citation
LatexCommand citep
key "smith2009grails"

\end_inset

.
\end_layout

\begin_layout Standard
Uma DSL pode suportar a definição do comportamento de um SAD, fornecendo
 uma solução compatível com os termos usados pelos especialistas.
 Isso facilita que eles possam especificar o comportamento de um SAD com
 um alto grau de detalhamento, suficiente para diminuir ou evitar a necessidade
 de intervenção de desenvolvedores de software.
 Especialistas podem se tornar, na prática, programadores de seus próprios
 SADs.
\end_layout

\begin_layout Standard
Neste projeto, DSLs servem para customizar o comportamento dos SADs.
 Por isso, uma 
\lang english
Domain-Specifc Programming Language 
\lang brazilian
em Groovy foi desenvolvida.
 Ela faz uso da ontologia para organizar o conhecimento do domínio e definir
 o comportamento dos SADs.
 
\end_layout

\begin_layout Section
Considerações finais
\begin_inset Note Note
status collapsed

\begin_layout Section
Trabalhos relacionados
\end_layout

\begin_layout Plain Layout
Após uma pesquisa bibliográfica não foi possível encontrar sistemas que
 propusessem a geração automática de interface para Sistemas de Apoio a
 Decisão (SADs) com ou sem o uso de ontologias.
 Os artigos encontrados mais próximos ao tema deste trabalho tratam do uso
 de ontologias ou de 
\lang english
frameworks
\lang brazilian
 em SADs para a área de sustentabilidade, área que vai ser usada neste trabalho
 para teste dos sistemas desenvolvidos.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset citation
LatexCommand citet
key "ruiz2006using"

\end_inset

 analisou e identificou 50 tipos de uso de ontologias na engenharia de software,
 entre as quais foram identificados dois usos no suporte a interfaces gráficas.
 
\begin_inset CommandInset citation
LatexCommand citet
key "paulheim2012ontology"

\end_inset

 propõem a definição de uma 
\lang english
ontology-enhanced user
\lang brazilian
 interface, que são um tipo de GUIs cujas capacidades de visualização, possibili
dades de interação, ou processo de desenvolvimento são habilitados ou (pelo
 menos) melhorados pelo emprego de uma ou mais ontologias.
 Nessa pesquisa foram identificados três propósitos para os quais são usadas
 as ontologias no melhoramento das interfaces gráficas:
\end_layout

\begin_layout Enumerate
Melhorar as capacidades de visualização
\end_layout

\begin_layout Enumerate
Melhorar as possibilidades de interação
\end_layout

\begin_layout Enumerate
Melhorar o processo de desenvolvimento
\end_layout

\begin_layout Plain Layout
A figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ontology-Enhanced-User-Interfaces-1"

\end_inset

 apresenta os tipos de usos das ontologias nas UI.
 Essas pesquisam dão a noção de que ontologias podem contribuir significativamen
te na geração de Web UI flexíveis e de SADs, confirmando a hipótese assumida
 na presente pesquisa.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A partir do problema identificado e da revisão da literatura, foi concluído
 que o desenvolvimento de ontologias é um área de pesquisa (abrangida pela
 Web Semântica) que permite desenvolver sistemas web baseados em conhecimento,
 satisfazendo os requisitos de desenvolvimento do SAD SustenAgro (Capítulo
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:SAD"

\end_inset

).
\end_layout

\begin_layout Standard
Porém, a definição de uma ontologia não é uma tarefa trivial, existem dificuldad
e, por parte dos especialistas do domínio, para formalizar ontologias.
 Diante deste cenário, foram analisadas varias soluções e encontrou-se que,
 fornecendo ferramentas simplificadas para edição e complementando ontologias
 com uma DSL, é possível facilitar a definição dos conceitos de um SAD e
 seu comportamento por especialistas.
\end_layout

\begin_layout Standard
No próximo capítulo, será apresentado o Framework Decisioner.
 Ele faz uso das tecnologias, abordadas neste capítulo, para definir um
 framework que facilita a definição de conhecimento dos especialistas com
 a finalidade de gerar SADs.
\end_layout

\end_body
\end_document
