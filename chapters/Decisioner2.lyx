#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass abntex2
\begin_preamble

\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language brazilian
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
A partir da descrição das características do SAD SustenAgro
\begin_inset Note Note
status open

\begin_layout Plain Layout
Onde isto está? Vai estar no cap SAD?
\end_layout

\end_inset

, do requisito de modelar o conhecimento através de ontologias (usando tecnologi
as da Web Semântica) e de definir uma DSL para facilitar a definição de
 comportamentos por parte dos especialistas, foi modelado e desenvolvido
 um protótipo de um framework, intitulado Decisioner, que permite definir
 e gerar SADs do tipo do SustenAgro.
 O framework Decisioner é basicamente formado por ontologias, que representam
 conhecimento do domínio, e por uma DSL que permite definir comportamentos
 e estabelecer configurações gerais de um SAD.
\end_layout

\begin_layout Standard
Satisfazer os requisitos requeridos pelos pesquisadores da Embrapa Meio
 Ambiente foi uma das forças dirigindo o desenvolvimento deste trabalho.
 Para chegar a arquitetura, aqui apresentada, houve um trabalho interativo
 para chegar aos requisitos que eram gerais, que deveriam estar no framework,
 e os que eram específicos, que deveriam estar definidos na ontologia ou
 na DSL do SustenAgro.
 
\end_layout

\begin_layout Standard
Neste capítulo será apresentado a arquitetura do protótipo Decisioner, cada
 uns dos seus componentes e funcionalidades e as contribuições para esta
 pesquisa.
\end_layout

\begin_layout Section
Arquitetura do Decisioner
\end_layout

\begin_layout Standard
Os SADs, segundo a descrição feita no capitulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:SAD"

\end_inset

, são compostos por banco de dados, base de conhecimento, modulo de processament
o da informação e modulo gerador de resultados.
 Em cada um desses módulos, está implícito o conhecimento dos especialistas,
 pelo qual a primeira característica definida do Decisioner foi a integração
 de ontologias.
 
\end_layout

\begin_layout Standard
As ontologias permitem a definição do conhecimento dos especialistas em
 um componente independente.
 Ele é complementado pela DSL, que permite definir comportamento e característic
as do SAD.
 O diagrama para a arquitetura desenvolvida para essa solução é apresentado
 na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Componente-DSL"

\end_inset

.
 Com base nesse diagrama, os componentes dos SADs foram generalizados e,
 por meio do desenvolvimento de experimentos, foi definida uma arquitetura
 que pode ser reusada em diferentes SADs (do mesmo tipo do SustenAgro).
\end_layout

\begin_layout Standard
O Decisioner pode ser classificado como um framework.
 Já que é uma plataforma de software com design reutilizável e implementações
 reutilizáveis pelos clientes, que o especializam em um domínio particular
 
\begin_inset CommandInset citation
LatexCommand citep
key "RiehlePhdthesis"

\end_inset

.
\end_layout

\begin_layout Standard
A arquitetura do framework Decisioner é composta pelos componentes gerais
 para a definição de SADs, apresentados na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interfaces"

\end_inset

.
 Usuários especialistas podem interagir com o framework através dos editores
 de ontologias e DSL.
 Usuários finais interagem através da sua interface Web.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/Decisioner Architecture.png
	width 80col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Arquitetura do Decisioner
\begin_inset CommandInset label
LatexCommand label
name "fig:Interfaces"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Os componentes dessa arquitetura são:
\end_layout

\begin_layout Enumerate

\series bold
\lang english
Domain ontology
\series default
\lang brazilian
: representa os conceitos específicos dos especialistas que serão utilizados
 no SAD
\end_layout

\begin_layout Enumerate

\series bold
\lang english
Decisioner ontology
\series default
\lang brazilian
: faz uma ligação entre os tipos de dados e as interfaces gráficas capazes
 de mostrar ou editar esses dados, fazendo um mapeamento entre os dois.
\end_layout

\begin_layout Enumerate

\series bold
\lang english
Ontology Editor
\series default
\lang brazilian
: componente que permite editar as ontologias em um formato mais fácil para
 o uso pelos especialistas.
\end_layout

\begin_layout Enumerate

\series bold
\lang english
Triplestore
\series default
\lang brazilian
: sistema de armazenamento e recuperação da informação em formato de triplas
 RDF.
 Ele permite o gerenciamento de dados e ontologias em formato 
\lang english
RDF.

\lang brazilian
 Suporta consultas, na linguagem padrão 
\lang english
SPARQL Protocol and RDF Query Language (Sparql 
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Sparql"
description "SPARQL Protocol and RDF Query Language"

\end_inset

)
\lang brazilian
.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
REF
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\series bold
\lang english
DSL code
\series default
\lang brazilian
: representa uma instancia da DSL com as definições particulares para um
 SAD específico.
\end_layout

\begin_layout Enumerate

\series bold
DSL Editor
\series default
: Editor visual web da DSL com recursos como 
\lang english
code completion
\lang brazilian
 e 
\lang english
syntax coloring
\lang brazilian
.
 Permite a edição da 
\lang english
DSL
\lang brazilian
 por parte dos especialistas do domínio.
\end_layout

\begin_layout Enumerate

\series bold
\lang english
Web components
\series default
:
\lang brazilian
 conjunto de elementos visuais que podem ser reusados nos SADs com a finalidade
 de modularizar e simplificar a geração de 
\lang english
Web User Interfaces
\lang brazilian
 (UI
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "UI"
description "User Interface"

\end_inset

).
\end_layout

\begin_layout Enumerate

\series bold
\lang english
DSL Interpreter
\series default
\lang brazilian
: 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Mude na figura
\end_layout

\end_inset

Interpretador da DSL para processar as definições do SAD e criar um SAD
 específico.
 Ele usa a DSL, ontologias e componentes web para gerar automaticamente
 a interface e comportamento de um SAD específico.
\end_layout

\begin_layout Enumerate

\series bold
\lang english
Web UI
\series default
\lang brazilian
: Interfaces visuais geradas pelo 
\lang english
DSL Interpreter.

\lang brazilian
 Elas utilizam os 
\lang english
Web Components
\lang brazilian
 e fornecer a interface gráfica, usadas pelos usuários finais, na interação
 com o SAD na Web.
\end_layout

\begin_layout Standard
Essa arquitetura foi implementada em um protótipo Decisioner.
 Sempre que possível, na implementação do Decisioner, foram reutilizados
 componentes ou bibliotecas disponíveis publicamente na internet.
 
\end_layout

\begin_layout Section
Metodologia
\end_layout

\begin_layout Standard
Com a finalidade de desenvolver o protótipo do framework Decisioner, escolheu-se
 o SAD SustenAgro como um caso de uso e exemplo de instanciação.
 Ele permitiu a definição de uma metodologia de desenvolvimento para os
 componentes.
 Teria sido interessante instanciar o framework para um segundo SAD, para
 demonstrar melhor sua generalidade.
 Contudo, dada as limitações de tempo impostas a um mestrado e ao tempo
 necessário ao desenvolvimento do framework, isso não foi possível.
 No decorrer deste texto, serão feitas algumas considerações sobre a generalidad
e do framework.
 A metodologia abordada durante este processo, incluiu as seguintes etapas:
\end_layout

\begin_layout Enumerate
Seleção da 
\lang english
Triplestore
\lang brazilian
: foram avaliadas as 
\lang english
triplestores
\lang brazilian
 existentes com a finalidade de definir uma que se adaptasse aos requisitos
 do framework.
\end_layout

\begin_layout Enumerate
Seleção da linguagem de programação e framework web: foi realizada uma verificaç
ão das tecnologias de desenvolvimento de sistemas web compatíveis com as
 tecnologias da web semântica e com a 
\lang english
DSL
\lang brazilian
.
\end_layout

\begin_layout Enumerate
Design da DSL: Durante o processo de desenvolvimento do SAD SustenAgro,
 foram generalizados seus componentes, permitindo definir cada uma das caracterí
sticas da DSL.
 O processo foi iterativo, permitindo refinar a expressividade da linguagem
 com a ajuda de especialistas da Embrapa.
\end_layout

\begin_layout Enumerate
Desenvolvimento do 
\lang english
DSL editor
\lang brazilian
: implementação de uma 
\lang english
web UI
\lang brazilian
 que permite editar a DSL em formato textual, fornecendo aos especialistas
 um editor moderno.
 Modificações na DSL podem ser vistas no SAD imediatamente.
\end_layout

\begin_layout Enumerate
Desenvolvimento do 
\lang english
Ontology Editor
\lang brazilian
: implementação de uma 
\lang english
web UI
\lang brazilian
 com componentes específicos para suportar a edição das ontologias, por
 parte dos especialistas, em um formato textual.
\end_layout

\begin_layout Enumerate
Desenvolvimento do DSL Interpreter: o interprete da Decisioner DSL.
 Esse componente tinha que ser atualizado a medida que o design da DSL mudava.
\end_layout

\begin_layout Enumerate
Integração com 
\lang english
web components
\lang brazilian
 e 
\lang english
web UI
\lang brazilian
s: 
\lang english
Widgets
\lang brazilian
 gráficas, na forma de 
\lang english
Web components
\lang brazilian
 suportam a geração das 
\lang english
Web UIs
\lang brazilian
 que compõem os SADs.
 Widgets foram adicionadas para atender as necessidades do SuatenAgro.
\end_layout

\begin_layout Standard
A metodologia de desenvolvimento foi guiada pelo desenvolvimento do SAD
 SustenAgro.
 Primeiramente foram desenvolvidas as ontologias, continuando com o desenvolvime
nto do DSL Interpreter e depois com a integração dos 
\lang english
web components
\lang brazilian
 e 
\lang english
UI
\lang brazilian
s.
 Foram realizados vários ciclos de desenvolvimento para refinar as funcionalidad
es.
 A Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Metodologia-do-Decisioner"

\end_inset

 representa a metodologia realizada.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/Decisioner Methodology.png
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Metodologia de desenvolvimento do Decisioner
\begin_inset CommandInset label
LatexCommand label
name "fig:Metodologia-do-Decisioner"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Metodologia para a ontologia Decisioner
\end_layout

\begin_layout Standard
Para desenvolver um protótipo de uma ontologia geral, que abstraísse os
 conceitos dos SADs, foram analisados os seguintes sistemas SAD criados
 pela Embrapa Meio Ambiente:
\end_layout

\begin_layout Enumerate
Sistema Innova-Tec: avaliação do impacto da inovação tecnológica
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://www.cnpma.embrapa.br/forms/inova_tec.php3
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Sistema Nano-Tec: avaliação do impacto de nanotecnologias
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://ainfo.cnptia.embrapa.br/digital/bitstream/item/77537/1/2012AA80.pdf
 
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Sistema Atlantis: Sistema para levantamento e sistematização da informação
 técnica em temas de pesquisa, tecnologias e inovação.
 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://www.embrapa.br/en/busca-de-produtos-processos-e-servicos/-/produto-servico
/2102/atlantis---atlantis
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Sistema GMP-RAM v.1.1: avaliação de Risco de Plantas Geneticamente Modificadas
 (GMP 
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "GMP"
description "Genetically Modified Plants"

\end_inset

)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://www.cnpma.embrapa.br/forms/gmp_ram.php3
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Software para avaliação de segurança e impactos de plantas geneticamente
 modificadas
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://www.cnpma.embrapa.br/nova/mostra2.php3?id=857
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Software para avaliação de impactos de nanotecnologias 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Voce nao esta repetindo?
\end_layout

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://www.embrapa.br/en/busca-de-publicacoes/-/publicacao/951543/metodologia-par
a-avaliacao-de-impactos-das-nanotecnologias-metodo-e-software-impactos-nanotec
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A partir das características desses sistemas e da definição do SAD SustenAgro,
 capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:SustenAgro"

\end_inset

, foi possível definir os principais conceitos para definir a ontologia
 Decisioner.
 A versão inicial foi desenvolvida na ferramenta Protégé, no formato 
\lang english
OWL
\lang brazilian
.
 Depois foi criado um novo formato, usando o 
\lang english
YAML Ain't Markup Language (YAML 
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "YAML"
description "YAML Ain't Markup Language\\\\"

\end_inset

)
\lang brazilian
, mais simples que OWL, para ser usado pelos especialistas no 
\lang english
Ontology Editor
\lang brazilian
.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Essa tambem? Nao foi so a outra?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A seguir, cada componente da arquitetura do Decisioner é discutido, incluindo
 a ontologia Decisioner.
\end_layout

\begin_layout Section
Ontologia Decisioner
\end_layout

\begin_layout Standard
A partir do análise dos SADs da Embrapa, foram identificados e abstraídos
 elementos comuns na ontologia Decisioner, com o propósito de fornecer uma
 ontologia geral que dê suporte a SADs diferentes.
 Na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modelagem-do-SAD"

\end_inset

, é apresentada a hierarquia de classes resultante.
 Ela contem as classes:
\end_layout

\begin_layout Description

\lang english
Evaluation
\begin_inset space \space{}
\end_inset

Object
\lang brazilian
: classe que representa os objetos que serão analisados em cada processo
 de avaliação.
 Eles serão indivíduos dessa classe ou de alguma subclasse dela.
\end_layout

\begin_layout Description

\lang english
Feature
\lang brazilian
: classe que representa as caraterísticas a avaliar de um 
\lang english
Evaluation Object.

\lang brazilian
 Elas serão quantificadas, analisadas e usadas no processo de geração de
 relatórios no processo de avaliação.
 As 
\lang english
Features
\lang brazilian
 têm associado um 
\lang english
Value
\lang brazilian
 que as quantifica.
 Existe a subclasse 
\shape italic
\lang english
Weighted
\shape default
\lang brazilian
 que representa uma 
\lang english
Feature
\lang brazilian
 vinculada a um peso.
 Esse peso pode ser usado nas formulas para o cálculo dos modelos codificados
 pelos especialistas.
\end_layout

\begin_layout Description

\lang english
Place
\lang brazilian
: classe que representa a localização física dos objetos modelados, permitindo
 referenciar geograficamente um 
\lang english
Evaluation Object.
\end_layout

\begin_layout Description

\lang english
Analysis
\lang brazilian
: classe que representa uma avaliação associada a um 
\lang english
Evaluation Object
\lang brazilian
.
 Suas instâncias têm propriedades, como nome e data da avaliação, e correspondem
 a uma avaliação cadastrada.
\end_layout

\begin_layout Description

\lang english
Value
\lang brazilian
: classe que representa os valores que são atribuídos a cada instância de
 
\lang english
Feature.

\lang brazilian
 As subclasses 
\lang english
Real
\lang brazilian
 e 
\lang english
Categorical
\lang brazilian
 representam tipos de valores.
\end_layout

\begin_layout Description

\lang english
User
\lang brazilian
: classe que representa os usuários do sistema.
\end_layout

\begin_layout Description

\lang english
Role
\lang brazilian
: classe que representa os papeis de usuário do sistema e suas permissões.
 Por padrão, estão instanciados os perfis 
\lang english
User
\lang brazilian
 e 
\lang english
Admin
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/DSS ontology.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Modelagem abstrato do SAD
\begin_inset CommandInset label
LatexCommand label
name "fig:Modelagem-do-SAD"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A partir dessas classes, é possível organizar os conceitos específicos de
 cada SAD como subclasses delas.
 Um aspecto importante das ontologias é que suportam a inferência de novos
 conhecimentos, permitindo classificar e relacionar dados novos do sistema,
 ajudando desta maneira na automatização da geração dos SADs.
 Isso permite ao DSL Interpreter mapear qualquer conceito novo, específico
 de um SAD em particular, a um desses conceitos conhecidos e saber o que
 deve ser feito com ele.
 
\end_layout

\begin_layout Section

\lang english
Ontology Editor
\end_layout

\begin_layout Standard
Para suportar a edição das ontologias do domínio, por parte dos especialistas,
 foi implementado um editor web.
 Ele permite editar a ontologia específica do SAD em um formato baseado
 em 
\lang english
YAML.

\lang brazilian
 A Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Editor-de-ontologia"

\end_inset

 mostra uma imagem do editor.
 Ela mostra o código da ontologia em formato 
\lang english
YAML
\lang brazilian
, um 
\lang english
side panel,
\lang brazilian
 que apresenta as classes, propriedades e indivíduos hierarquicamente (permitind
o a referenciação dos elementos no código), um 
\lang english
button restore
\lang brazilian
 para restituir a ultima versão da ontologia e um 
\lang english
button save
\lang brazilian
 para salvar e carregar no Decisioner a ontologia em edição.
\end_layout

\begin_layout Standard
\align left
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/SustenAgro-ontology-editor.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Editor de ontologia
\begin_inset CommandInset label
LatexCommand label
name "fig:Editor-de-ontologia"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Idealmente, especialistas de domínio deveriam poder criar a ontologia usando
 um editor gráfico.
 Mas devido as restrições de escopo de um projeto de mestrado, não haveria
 tempo para criar um.
 A criação de uma ferramenta, como um editor gráfico, teria o escopo de
 um novo mestrado.
 
\end_layout

\begin_layout Standard
Usar um editor para OWL, como o Protégé, exigiria que os especialistas de
 domínio aprendessem OWL e lógica descritiva, o que não é uma opção viável.
 Este editor de ontologias é uma solução intermediária.
 Ele adota um formato em YAML, menos complexo que OWL, mas expressivo o
 suficiente para as necessidades das ontologias.
 Ele ajuda os usuários a encontrar os elementos da ontologia (side panel)
 e permite a inserção da ontologia no Decisioner.
 Apesar de ser possível aos especialistas desenvolver uma ontologia totalmente
 nova, usando o editor, seu objetivo é permitir que eles possam fazer modificaçõ
es localizadas nas ontologias.
 
\end_layout

\begin_layout Section

\lang english
Triplestore
\end_layout

\begin_layout Standard
O framework Decisioner é baseado nas tecnologias da web semântica.
 Entre elas estão as 
\lang english
triplestores,
\lang brazilian
 que suportam o armazenamento e a recuperação de triplas no padrão 
\lang english
RDF
\lang brazilian
 
\begin_inset CommandInset citation
LatexCommand citep
key "rusher2003triple"

\end_inset


\lang english
.

\lang brazilian
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Fale algo das triple stores no capitulo de ontologias.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
O Decisioner usa a triplestore 
\lang english
Blazegraph
\lang brazilian
 
\begin_inset Foot
status open

\begin_layout Plain Layout
https://www.blazegraph.com/
\end_layout

\end_inset

.
 Ela integra as características de uma 
\lang english
triplestore
\lang brazilian
, fornece suporte nativo a 
\lang english
SPARQL
\lang brazilian
 e implementa o 
\lang english
SPARQL Protocol Endpoint
\lang brazilian
.
 Esse último, padroniza a comunicação com os clientes e a compatibilidade
 com os sistemas web, por meio de 
\lang english
um Endpoint
\lang brazilian
 (um endereço onde requisições em SPARQL podem ser feitas).
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Coloque algumas specs do Blazegraph: max numero de triplas, rodar em cluster,
 etc.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
O Blazegraph foi escolhido por ter código aberto (Licença GPL) e ser compatível
 com os padrões da Web Semântica.
 Mas qualquer triplestore que seja compatível com os mesmos padrões pode
 ser usada.
\end_layout

\begin_layout Section
Decisioner DSL
\end_layout

\begin_layout Standard
Para permitir que os especialistas definam o comportamento do framework
 Decisioner, foi definida uma DSL que permite definir as principais característi
cas de um SAD.
 Dita Ela foi baseada na modelagem geral da arquitetura do 
\lang english
Decisioner
\lang brazilian
 e permite relacionar conceitos específicos dos especialistas, criar equações
 para os modelos usados, gerar a interface web para o usuário final, servindo
 de interface entre a ontologia do Decisioner e a ontologia do domínio.
\end_layout

\begin_layout Standard
A DSL foi baseada na linguagem 
\lang english
Groovy
\lang brazilian
, porque ela suporta o desenvolvimento de 
\lang english
DSLs
\lang brazilian
 que se comportam como extensões da linguagem 
\lang english
Groovy
\lang brazilian
.
\end_layout

\begin_layout Standard
O uso da DSL, por parte especialistas, diminui o esforço necessário no desenvolv
imento de um SAD.
 Ela permite que os próprios especialistas sejam capazes de fazer parte
 do desenvolvimento e validação do SAD.
 Especialmente na parte de refinamento e atualização do SAD, especialistas
 podem fazer modificações no sistema sem a ajuda de programadores e ver
 o resultado dessas mudanças imediatamente.
\end_layout

\begin_layout Standard
As instruções definidas na DSL são:
\end_layout

\begin_layout Subsection

\lang english
Evaluation Object
\end_layout

\begin_layout Standard
Nos SAD focados na avaliação, existe um objeto de avaliação que representa
 as entidades a serem avaliadas.
 Esse objeto é constituído por propriedades que especificam o que está sendo
 avaliado.
 A instrução 
\shape italic
\lang english
evaluationObject
\lang brazilian
 
\shape default
permite definir as propriedades desse objeto.
 Por exemplo, caso uma fazenda esteja sendo avaliada, é possível criar proprieda
des como nome, tipo de produção, localização, etc.
\end_layout

\begin_layout Standard
A instrução tem como argumentos a URI (ou label) da classe da ontologia
 do domínio, que será objeto de avaliação, e cada uma das propriedades relaciona
das.
 A Listagem 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:DSL-para-definição"

\end_inset

 apresenta um exemplo que usa a classe 
\shape italic
ProductionUnit
\shape default
, como classe dos objetos a serem avaliado, e define as propriedades 
\shape italic
hasName
\shape default
, para nome, e 
\shape italic
hasAgriculturalProductionSystem
\shape default
, para tipo de produção.
 Podem ser usados os labels das propriedades, ao invés de suas URIs
\shape italic
.
\end_layout

\begin_layout Standard
O comando 
\shape italic
\lang english
instance
\shape default
\lang brazilian
 vincula uma propriedade definida na ontologia, através da URI.
 Ela pode ser complementada por parâmetros que customizam a representação
 visual da propriedade.
 O comando 
\shape italic
\lang english
type
\shape default
\lang brazilian
 faz com que os 
\lang english
EvaluationObject
\lang brazilian
 tenham que ser de subclasses da classe principal.
 Por exemplo, uma unidade produtiva pode ser uma plantação greenfield (mecanizad
a e uniforme), fazenda familiar, etc.
 Os parâmetros que podem complementar as instruções anteriores são:
\end_layout

\begin_layout Enumerate

\shape italic
\lang english
required
\shape default
\lang brazilian
: define uma propriedade obrigatória
\end_layout

\begin_layout Enumerate

\shape italic
\lang english
label
\shape default
\lang brazilian
: define um texto associado
\end_layout

\begin_layout Enumerate

\shape italic
\lang english
placeholder
\lang brazilian
:
\shape default
 define um texto de ajuda
\end_layout

\begin_layout Enumerate

\shape italic
\lang english
widget
\shape default
\lang brazilian
: define um controle gráfico de usuário
\begin_inset Note Note
status open

\begin_layout Plain Layout
Voce usou essas opcoes? Elas estao definidas?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

evaluationObject ":ProductionUnit", {     
\end_layout

\begin_layout Plain Layout

 instance "ui:hasName', label: ["en": "Name", "pt": "Nome"]
\end_layout

\begin_layout Plain Layout

 instance ":hasAgriculturalProductionSystem"
\end_layout

\begin_layout Plain Layout

 type label: ["en": "Type", "pt": "Tipo"]
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
Definição do Evaluation Object 
\begin_inset CommandInset label
LatexCommand label
name "lis:DSL-para-definição"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\lang english
Feature
\end_layout

\begin_layout Standard
A instrução 
\shape italic
\lang english
Feature
\shape default
\lang brazilian
 define as características, do Evaluation Object, que serão usadas na sua
 avaliação.
 O DSL Interpreter vai gerar uma interface gráfica, onde o usuário final
 terá que preencher os dados sobre cada característica.
 Cada característica tem um tipo associado a ela (na ontologia de domínio).
 A partir dele, é possível associar uma widget específica para edição.
 Por exemplo, a Figura *** 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Fazer essa figura mostrando uma única caracteristica sendo escolhida.
\end_layout

\end_inset

mostra a widget para uma característica que tem um tipo categórico com 3
 possíveis valores.
 Os textos mostrados vêm da ontologia e fazem parte da descrição de cada
 elemento.
 É possível criar descrições em mais de uma língua.
\end_layout

\begin_layout Standard
Quando o usuário final usa a widget, o valor escolhido é anotado, no Evaluation
 Object, usando a propriedade 
\shape italic
\lang english
has value
\shape default
\lang brazilian
.
 Nas fórmulas, usadas para os cálculos do modelo usado, é possível acessar
 esses valore.
 Os usuários não precisam preencher a todas as características.
\end_layout

\begin_layout Standard
O comando tem como argumento uma URI (ou label) (Listagem 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Definição-de-Features"

\end_inset

) que vincular todas as subclasses da classe referenciada.
 O parâmetro opcional 
\shape italic
\lang english
extraFeatures
\shape default
\lang brazilian
 permite ativar a inserção de novas
\shape italic
\lang english
 features
\shape default
\lang brazilian
, por parte do usuário do SAD.
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

feature ':EnvironmentalIndicator', 'extraFeatures': true
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Definição de Features
\begin_inset CommandInset label
LatexCommand label
name "lis:Definição-de-Features"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\lang english
Report
\end_layout

\begin_layout Standard
O comando 
\shape italic
\lang english
Report
\shape default
\lang brazilian
 permite definir as fórmulas e procedimentos matemáticas necessárias, para
 o cálculo do modelo usado pelos especialistas de domínio, e como os resultados
 serão apresentados (Listagem 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Definição-da-logica"

\end_inset

).
 Fórmulas e procedimentos para modelagem matemática são de responsabilidade
 dos especialistas de domínio.
 A DSL permite desde fórmulas simples, de uma linha, até o uso de bibliotecas
 complexas, chamadas usando a JVM.
 Como a DSL é uma extensão da linguagem Groovy, qualquer comando da linguagem
 pode ser usado nela.
 Incluindo operações lógicas e aritméticas..
 Para facilitar o trabalho dos especialistas de domínio, recomenda-se encapsular
 qualquer algoritmo ou chamada de função mais complicados num comando simples.
\end_layout

\begin_layout Standard
As fórmulas usadas têm acesso a todos os dados associados às 
\shape italic
\lang english
Features
\shape default
\lang brazilian
, pelos usuários finais.
 Esses dados são usados no modelo adotado e podem gerar múltiplos resultados
 de avaliação.
 Na Listagem 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Definição-da-logica"

\end_inset

, o comando 
\shape italic
weightedSum(data.':EnvironmentalIndicator')
\shape default
 calcula a média ponderada de todos os indicadores ambientais fornecidos
 pelo usuário final.
 Esse comando foi criado para simplificar o trabalho dos especialistas.
 Biblioteca de comandos, como esse, podem ser adicionadas ao framework ou
 criados a pedido dos especialistas.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

report {     
\end_layout

\begin_layout Plain Layout

 environment = weightedSum(data.':EnvironmentalIndicator')
\end_layout

\begin_layout Plain Layout

 economic = weightedSum(data.':EconomicIndicator')
\end_layout

\begin_layout Plain Layout

 social = weightedSum(data.':SocialIndicator')
\end_layout

\begin_layout Plain Layout

 sustainability = (environment + social + economic)/3
\end_layout

\begin_layout Plain Layout

 ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Definição da lógica de avaliação.
\begin_inset CommandInset label
LatexCommand label
name "lis:Definição-da-logica"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Os resultados do processo de avaliação podem ser apresentados por meio de
 vária 
\shape italic
\lang english
widgets
\shape default
\lang brazilian
 que facilitem a representação e compreensão dos resultados da avaliação.
 Listagem 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Definição-das-widgets"

\end_inset

, o comando 
\shape italic
sustainabilityMatrix x: sustainability, y: efficiency
\shape default
 apresenta os valores das variáveis 
\shape italic
sustainability
\shape default
 e 
\shape italic
efficiency
\shape default
 num gráfico de matriz de sustentabilidade (Figura 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Se já tiver uma figura, basta referencia-la.
\end_layout

\end_inset

).
 Para executar esse comando, o DSL Interpreter simplesmente coloca a widget
 
\shape italic
suatainabilityMatrix
\shape default
 na UI e passa os valores das variáveis, como atributos.
 A widget vai ser responsável por criar o gráfico.
 Essas widgets gráficas podem ser criadas como Web Components 
\begin_inset Note Note
status open

\begin_layout Plain Layout
REF
\end_layout

\end_inset

 padrão (HTML 5) ou componentes do framework Grails (Seção 
\begin_inset Note Note
status open

\begin_layout Plain Layout
colocar Você fala de Web components em algum lugar? 
\end_layout

\end_inset

).
 O framework vem com um conjunto de widgets pré definido, mas novas podem
 ser adicionadas.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

report {
\end_layout

\begin_layout Plain Layout

 ...
\end_layout

\begin_layout Plain Layout

 sustainabilityMatrix x: sustainability, y: efficiency
\end_layout

\begin_layout Plain Layout

 text 'en': 'Microregion map', 'pt': 'Mapa da microregião'
\end_layout

\begin_layout Plain Layout

 map data.'Microregion'
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
Definição dos componentes visuais do relatório.
 
\begin_inset CommandInset label
LatexCommand label
name "lis:Definição-das-widgets"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 Por meio dos comandos da DSL, é possível definir o comportamento e as caracterí
sticas gerais dos SAD.
 
\end_layout

\begin_layout Standard
Os elementos gráficos (widgets), sejam os que representam as Features ou
 os usados nos relatórios, são implementados como 
\lang english
Web Components
\lang brazilian
 HTML 5 ou Grails.
 Isso dá muita flexibilidade ao framework Decisioner.
 A qualquer tempo é possível se acrescentar novas widgets, para novos tipos
 de dados (Features) ou gráficos de relatórios.
 
\end_layout

\begin_layout Section

\lang english
DSL Editor
\end_layout

\begin_layout Standard
Para suportar a edição da Decisioner DSL, foi implementado um editor textual
 web que permite aos especialistas editar e rodar o código da DSL.
 Ele é composto por um editor de código para a DSL, um 
\lang english
button restore
\lang brazilian
 para carregar novamente a última versão válida da DSL e um 
\lang english
button save
\lang brazilian
 para salvar e carregar a DSL no DSL Interpreter.
 A Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Editor-DSL"

\end_inset

 mostra o editor em ação.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Fale um pouco mais: diga que o editor usa o ACE e oferece code coloring,
 etc.
 Comente o fato que o usuário pode ver os resultados das mudanças imediatamente,
 permitindo um feedback imediato para os especialistas.
 Fale que, se houver algum erro, a ultima versao pode rodar, etc.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/SustenAgro-dsl-editor-2.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Editor DSL
\begin_inset CommandInset label
LatexCommand label
name "fig:Editor-DSL"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section

\lang english
Web components
\end_layout

\begin_layout Standard

\lang english
Web Component
\lang brazilian
s
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.webcomponents.org/introduction
\end_layout

\end_inset


\end_layout

\end_inset

 é um conjunto de APIs padrão para definir novas tags 
\lang english
HTML
\lang brazilian
 personalizadas, reutilizáveis e encapsuladas para o uso em páginas ou aplicaçõe
s web.
 O framework Grails também disponibiliza o uso de layout templates para
 implementar partes reusáveis de uma view (página HTML).
 Com essas duas tecnologias, é possível a criação de componentes (ou widgets)
 reusáveis da UI.
 
\end_layout

\begin_layout Standard
Para suportar a geração de diferentes tipos de SADs, foi necessário disponibiliz
ar vários tipos de widgets que permitissem visualizar e editar diferentes
 tipos de dados.
 Para relacionar os 
\lang english
web components
\lang brazilian
 com o conhecimento dos especialistas, modelou-se, na ontologia Decisioner,
 os 
\lang english
data-types
\lang brazilian
 que permitem relacionar os tipos de dados com widgets específicas (capazes
 de edita-los), usadas nas 
\lang english
web UIs
\lang brazilian
 dos SADs gerados.
 Os dados das Features dos SADs podem ser de vários tipos e, para cada tipo,
 existe uma widget apropriada para visualiza-o.
 Por exemplo, para representar uma propriedade de tipo numérico discreto
 é possível usar uma widget visual tipo 
\lang english
spinner
\lang brazilian
.
\end_layout

\begin_layout Standard
Nos relatórios, os especialistas devem contar com widgets para apresentar
 seus resultados em vários formatos, como tabelas, mapas, matriz de sustentabili
dade, etc.
 Essas widgets podem ser específicas para um tipo de SAD em particular.
 Por isso, além do framework contar com uma biblioteca de widgets prontas,
 deve ser possível adicionar novas widgets facilmente.
 Ao usar padrões, como para Web Components, o framework permite a fácil
 inclusão de widgets novas.
 Não se espera que os especialistas de domínio criem essas widgets, mas
 sim que seja fácil para eles consegui-las de desenvolvedores independentes
 (que só precisam conhecer o padrão para Web Components e os requisitos
 da widget).
 
\end_layout

\begin_layout Standard
O framework Decisioner tem uma biblioteca de 
\lang english
web components
\lang brazilian
 (widget) construída usando o
\lang english
 web framework Bootstrap 
\lang brazilian

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://getbootstrap.com/
\end_layout

\end_inset


\end_layout

\end_inset

, que conta com diversos componentes básicos para a geração das Web UI.
 A maioria deles foi definida usando as 
\lang english
layout templates
\lang brazilian
 do framework 
\lang english
Grails
\lang brazilian
, por ser mais fácil de programar.
 Atualmente, apenas dois componentes usam Web Components.
\end_layout

\begin_layout Section

\lang english
Web UI
\end_layout

\begin_layout Standard
A 
\lang english
Web UI
\lang brazilian
 é uma interface web de usuário responsável por toda a interação com o usuário
 final.
 Ela permite apresentar e editar as informações do SAD, gerar as análises
 e visualizar os resultados na web ou em relatórios impressos.
 O mais importante é que ela é gerada automaticamente pelo DSL Interpreter,
 usando a DSL e ontologias particulares a cada SAD.
 
\end_layout

\begin_layout Standard
Parte da Web UI é igual para todos os SADs, como formulários de login.
 O resto dela é gerado com a ajuda dos 
\lang english
Web Components.

\lang brazilian
 Eles são relacionadas aos tipos de dados existentes no sistema, por meio
 da ontologia Decisioner.
 Por exemplo, dados podem ser dos tipos numérico contínuo, numérico discreto,
 percentagem, booleano, categóricos ou alfanumérico.
 Dada essa diversidade, os tipos de dados foram modelados em ontologias
 com a finalidade de permitir a adaptação automática (ou semiautomática)
 da interface às mudanças dos conceitos do domínio.
\end_layout

\begin_layout Standard
Mudanças no layout geral podem ser feitas também através da edição das 
\lang english
Cascading Style Sheets (CSS 
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "CSS"
description "Cascading Style Sheets"

\end_inset

)
\lang brazilian
 do Decisioner.
 É esperado que, quando da instalação do sistema, técnicos de informática
 façam uma customização do sistema para adequa-lo aos padrões de apresentação
 da instituição.
 Eles também devem incluir qualquer Web Component (widget) necessário mas
 não disponível por default no Decisioner.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Após uma pesquisa bibliográfica não foi possível encontrar sistemas que
 propusessem a geração automática de interface para Sistemas de Apoio a
 Decisão (SADs) com ou sem o uso de ontologias.
 Os artigos encontrados mais próximos ao tema deste trabalho tratam do uso
 de ontologias ou de 
\lang english
frameworks
\lang brazilian
 em SADs para a área de sustentabilidade, área que vai ser usada neste trabalho
 para teste dos sistemas desenvolvidos.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset citation
LatexCommand citet
key "ruiz2006using"

\end_inset

 analisou e identificou 50 tipos de uso de ontologias na engenharia de software,
 entre as quais foram identificados dois usos no suporte a interfaces gráficas.
 
\begin_inset CommandInset citation
LatexCommand citet
key "paulheim2012ontology"

\end_inset

 propõem a definição de uma 
\lang english
ontology-enhanced user
\lang brazilian
 interface, que são um tipo de GUIs cujas capacidades de visualização, possibili
dades de interação, ou processo de desenvolvimento são habilitados ou (pelo
 menos) melhorados pelo emprego de uma ou mais ontologias.
 Nessa pesquisa foram identificados três propósitos para os quais são usadas
 as ontologias no melhoramento das interfaces gráficas:
\end_layout

\begin_layout Enumerate
Melhorar as capacidades de visualização
\end_layout

\begin_layout Enumerate
Melhorar as possibilidades de interação
\end_layout

\begin_layout Enumerate
Melhorar o processo de desenvolvimento
\end_layout

\begin_layout Plain Layout
A figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ontology-Enhanced-User-Interfaces"

\end_inset

 apresenta os tipos de usos das ontologias nas UI.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/Ontology-enhanced user interfaces.png
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\lang english
Ontology Enhanced User Interfaces
\begin_inset CommandInset label
LatexCommand label
name "fig:Ontology-Enhanced-User-Interfaces"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Essas pesquisam dão a noção de que ontologias podem contribuir significativament
e na geração de Web UI flexíveis e de SADs, confirmando a hipótese assumida
 na presente pesquisa.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Web-UI"

\end_inset

 apresenta uma Web UI que foi gerada automaticamente, a partir da ontologia
 e das definições na DSL do SAD SUstenAgro.
 Nela são apresentados vários tipos de 
\lang english
Web Components
\lang brazilian
 que demostram o suporte a diferentes tipos de dados.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/SustenAgro-tool.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\lang english
Web UI 
\lang brazilian
com
\lang english
 web components
\begin_inset CommandInset label
LatexCommand label
name "fig:Web-UI"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section

\lang english
DSL Interpreter
\end_layout

\begin_layout Standard
O DSL Interpreter é o principal modulo do framework Decisioner.
 A sua principal funcionalidade é a interpretação das 
\lang english
DSLs
\lang brazilian
.
 Ele executa cada uma das instruções da DSL, vinculando dados e informação,
 das ontologias ou fornecidos pelos usuários finais, aos 
\lang english
web components
\lang brazilian
 com a finalidade de gerar as Web 
\lang english
UIs
\lang brazilian
.
\end_layout

\begin_layout Standard
Para interagir com os dados da ontologia e apresenta-los na linguagem dos
 especialistas, foi necessário criar, no DSL Interpreter, uma camada de
 consulta de dados na 
\lang english
triplestore
\lang brazilian
 para simplificar as consultas SPARQL (Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arquitetura-do-Decisioner-Core"

\end_inset

).
 Esta camada, Sparql Simplifier, foi desenvolvida como uma solução eficiente
 para a recuperação de informações semânticas de um domínio de conhecimento
 usando um formato simplificado.
 
\end_layout

\begin_layout Standard
O componente 
\lang english
Interpreter
\lang brazilian
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Mude o nome na imagem
\end_layout

\end_inset

interpreta as instruções dos especialistas na linguagem Decisioner DSL.
 Ele usou técnicas padrões para a criação de DSLs usando a linguagem 
\lang english
Groovy
\begin_inset Note Note
status open

\begin_layout Plain Layout

\lang english
Veja ref DSL in Groovy
\end_layout

\end_inset

,
\lang brazilian
 o que facilitou a definição das 
\lang english
DSLs
\lang brazilian
.
\end_layout

\begin_layout Standard
Finalmente, o DSL Interpreter usa o 
\lang english
UI Renderer
\lang brazilian
 para renderizar dinamicamente as Web 
\lang english
UIs
\lang brazilian
 usando os Web 
\lang english
Components.

\lang brazilian
 Esse processo é repetido toda vez que usuários solicitam uma 
\lang english
View
\lang brazilian
 de um SAD.
 A figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arquitetura-do-Decisioner-Core"

\end_inset

 apresenta o DSL Interpreter e os outros módulos com os quais ele se conecta.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/Decisioner Core Architecture.png
	width 60col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Arquitetura do DSL Interpreter.
\begin_inset CommandInset label
LatexCommand label
name "fig:Arquitetura-do-Decisioner-Core"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Considerações finais
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Voce deixou de fora aspectos mais padroes, como criacao de usuarios, seguranca
 etc.
 Isso está ok, mas coloque isso numa sentenca, pode ate ser na conclusao,
 dizendo que eles existem mas foram deixados de lado por nao serem tao important
es no entendimento do Decisioner e para deixar a explicacao mais simples.
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Não gostei desse fim.
 Você fala de contribuições, mas aqui não é o melhor lugar, não tem destaque.
 Faça um resumo do capitulo e fale sobre validacao do framework e da necessidade
 de instancia-lo (o que sera feito no proximo capitulo).
 Fale das dificuldades de separar o que é geral e especifico ao Sustenagro
 e que isso foi um processo iterativo.
 Comente que só houve tempo para uma instanciacao.
\end_layout

\begin_layout Plain Layout
NAO jogue fora as contribuicoes.
 Guarde para outro lugar (intro-conclusoes).
\end_layout

\end_inset

Este capítulo apresentou a arquitetura e componentes do framework Decisioner.
 A principal contribuição do Decisioner foi o método e ferramenta de geração
 de SADs que usa ontologias e 
\lang english
DSLs
\lang brazilian
, para gerar SAD de maneira semiautomática a geração de SADs.
\end_layout

\begin_layout Standard
Não foram encontrados trabalhos na área de geração automática de interfaces
 para SADs.
 Também foi encontrado pouco material sobre ontologias para descrição de
 interfaces gráficas, pelo que se considera que o método e a ferramenta
 desenvolvidas são contribuições para as áreas de pesquisa em Sistemas de
 Apoio à Decisão e em aplicações da Web Semântica.
\end_layout

\end_body
\end_document
